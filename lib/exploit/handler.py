from core.base.base_module import BaseModule
from core.utils.printer import *
from core.sessions import Sessions
from core.jobs import Jobs
import inspect, os
import importlib

class Handler(BaseModule):
	
	def handler_execute(self):
		session = Sessions()
		session.add_session(
						session_arch="",
						session_os="",
						session_version="",
						session_type="cmd",
						session_host=self.target,
						session_port=self.port,
						session_handler=self.execute,
						session_user="",
						session_listener="",
						session_option=self.exploit_attributes
		)

	def handler_ssh(self, client):

		listener_path = inspect.getfile(self.__class__).replace(os.getcwd()+"/modules/","")[:-3]	
		session = Sessions()
		session.add_session(
						session_arch="",
						session_os="",
						session_version="",
						session_type="ssh",
						session_host="",
						session_port="",
						session_handler=client,
						session_user="",
						session_listener=listener_path,
						session_option=self.exploit_attributes
		)
	
	def handler_reverse(self, lhost="", lport=""):
		if lhost=="" or lport=="":
			print_error("Missing lhost or lport in handler function")
			return 
		listener = getattr(importlib.import_module("modules.listeners.multi.reverse_tcp"), "Module")()
		listener.exploit_attributes["lhost"][0] = lhost
		listener.exploit_attributes["lport"][0] = lport
		setattr(listener, 'lhost', lhost)
		setattr(listener, 'lport', lport)
		job_id = Jobs().create_job("Reverse tcp", f":{lport}", listener.exploit, [])
		return job_id

	def handler_bind(self, rhost="", rport=""):
		if rhost=="" or rport=="":
			print_error("Missing rhost or rport in handler function")
			return 
		listener = getattr(importlib.import_module("modules.listeners.multi.bind_tcp"), "Module")()
		listener.exploit_attributes["rhost"][0] = rhost
		listener.exploit_attributes["rport"][0] = rport
		setattr(listener, 'rhost', rhost)
		setattr(listener, 'rport', rport)
		listener.exploit()