from core.base.base_module import BaseModule
from core.utils.printer import *
from core.sessions import Sessions
from core.base.option import *
from core.shellcode.shellcode_format import array_integer
from core.jobs import Jobs
from core.utils.function import *
import importlib
import time

class BrowserExploit(BaseModule):

	session = OptSession(0, "Session number", "yes")
	payload = OptPayload("", "Payload type", "yes")
	
	def __init__(self):
		super(BrowserExploit, self).__init__()
		self.type_module = "browser_exploit"
		self.jobs = Jobs()
		self.current_version = 0	
		self.payload_options = []
		self._current_payload = None		
	
	def run(self):
		raise NotImplementedError("You have to define your own 'run' method.")	
	
	def format_array_integer(self, payload):
		transform = array_integer(payload)
		return transform

	def _check_if_port_busy(self, lport):
		import socket, errno
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		try:
			s.bind(("0.0.0.0", int(lport)))
		except socket.error as e:
			if e.errno == errno.EADDRINUSE:	
				print_error("Port busy, please select another lport option")
			return False	
		return True
	
	def exploit(self):
		if self._current_payload:
			if "type" in self._current_payload._Module__info__:
				if self._current_payload._Module__info__['type'] == 'reverse':
					if self._current_payload._Module__info__['handler'] is not None:
						if self._check_if_port_busy(self.exploit_attributes['lport'][0]):
							try:
								prepare_handler = pythonize_path(self._current_payload._Module__info__['handler'])
								handler = getattr(importlib.import_module("modules."+prepare_handler), "Module")()
							except:
								print_error("Handler in payload module was not found")
								return
							setattr(handler, 'lhost', self.exploit_attributes['lhost'][0])
							handler.exploit_attributes['lhost'][0] = self.exploit_attributes['lhost'][0]
							setattr(handler, 'lport', self.exploit_attributes['lport'][0])
							handler.exploit_attributes['lport'][0] = self.exploit_attributes['lport'][0]
							job_id = self.jobs.create_job("Reverse tcp", f":{self.exploit_attributes['lport'][0]}", handler.exploit, [])
							time.sleep(1)
							code_execution = self.run()
	#					if code_execution == None:
	#						time.sleep(1)
	#						self.jobs.delete_job(job_id)
	#					elif not code_execution:
	#						time.sleep(1)
	#						self.jobs.delete_job(job_id)
							
			
				if self._current_payload._Module__info__['type'] == 'bind':
					if self._current_payload._Module__info__['handler'] is not None:
						self.run()
						time.sleep(2)
						try:
							prepare_handler = pythonize_path(self._current_payload._Module__info__['handler'])
							handler = getattr(importlib.import_module("modules."+prepare_handler), "Module")()
						except:
							print_error("Handler in payload module was not found")
							return
						setattr(handler, 'rhost', self.exploit_attributes['rhost'][0])
						handler.exploit_attributes['rhost'][0] = self.exploit_attributes['rhost'][0]					
						setattr(handler, 'rport', self.exploit_attributes['rport'][0])
						handler.exploit_attributes['rport'][0] = self.exploit_attributes['rport'][0]	
						connect_to = handler.exploit()
		else:
			self.run()	

	def _add_payload_option(self, payload):
		try:
			payload_path = pythonize_path(payload)
			module_path = ".".join(("modules",payload_path))
			try:
				module = getattr(importlib.import_module(module_path), "Module")()
				self._current_payload = module
			except ImportError:
				return False
			for option in module.options:
				self.payload_options.append(option)
				self.exploit_attributes[option] = module.exploit_attributes[option]	
		except:		
			return False			

	def send_js(self, code):
		shell = Sessions()
		shell.execute(self.session, code)
